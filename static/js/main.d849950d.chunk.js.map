{"version":3,"sources":["components/Item.js","components/Heading.js","components/Modal.js","components/MenuComposer.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleSubmit","handleOpen","toggleCheckbox","e","preventDefault","updateItem","item","id","title","input","open","_this2","conditions","map","condition","value","keys","checked","updateCondition","target","_ref","updatedCondition","defineProperty","hasOwnProperty","_ref2","test","_ref3","length","_ref4","conditionStr","find","_this3","_this$props$item","removeItem","react_default","a","createElement","className","onClick","onSubmit","type","onChange","index","key","name","htmlFor","replace","Component","Heading","showModal","titleList","valid","reduce","acc","next","Modal","items","recapItems","modalConditions","true_cond","false_cond","unchecked","forEach","values","push","objectSpread","join","document","MenuComposer","state","contains_number","2_chars_min","not_empty","history","modal","addItem","handleOpenAll","cancelAction","Math","random","toConsumableArray","concat","setState","newItems","filter","updatedProps","updatedItem","includes","openAll","prevItems","newHistory","splice","itemList","components_Item","draggable","onDragStart","dragStart","components_Heading","components_Modal","App","components_MenuComposer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d849950d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props);        \r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleOpen = this.handleOpen.bind(this);\r\n        this.toggleCheckbox = this.toggleCheckbox.bind(this);\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();      \r\n        this.props.updateItem(this.props.item.id, {title: this.props.item.input});\r\n    }\r\n\r\n    handleOpen() {\r\n        this.props.updateItem(this.props.item.id, {open: !this.props.item.open})\r\n    }\r\n\r\n    handleChange(e) {        \r\n        // keep changes in sync, check if our input matches checked condition\r\n        let conditions = this.props.item.conditions\r\n            .map(condition => {\r\n                let value = Object.keys(condition)[0];\r\n                if (condition.checked){\r\n                    return this.updateCondition(value, e.target.value)\r\n                } else {\r\n                    return condition\r\n                }\r\n            });\r\n        // update item props\r\n        this.props.updateItem(this.props.item.id, {\r\n            input: e.target.value,\r\n            conditions\r\n        })\r\n    }    \r\n\r\n    toggleCheckbox(e) {\r\n        // update condition, if box is not checked then condition is valid (nothing to check for)\r\n        let updatedCondition = e.target.checked \r\n                        ? this.updateCondition(e.target.value, this.props.item.input)\r\n                        : {[e.target.value]: true, checked: false}\r\n        let conditions = this.props.item.conditions.map(condition => {\r\n            if (condition.hasOwnProperty(e.target.value)) {\r\n                return updatedCondition;\r\n            } else return condition;\r\n        })\r\n\r\n        this.props.updateItem(this.props.item.id, {conditions});        \r\n    }\r\n\r\n    updateCondition(condition, input) {\r\n        switch(condition) {\r\n            case \"contains_number\" : {\r\n                return {[condition]: /[0-9]/.test(input), checked: true}\r\n            }\r\n            case \"2_chars_min\" : {\r\n                return {[condition]: input.length >= 2, checked: true}\r\n            }\r\n            case \"not_empty\" : {\r\n                return {[condition]: input !== \"\", checked: true}\r\n            }\r\n            default: return\r\n        }\r\n    }\r\n\r\n    ischecked(conditionStr) {\r\n        return this.props.item.conditions.find(condition => Object.keys(condition)[0] === conditionStr).checked\r\n    }\r\n\r\n    render() {        \r\n        const {title, id, open, input, conditions } = this.props.item;\r\n        const {removeItem} = this.props;\r\n        return (\r\n            <div className=\"item\">\r\n                <button onClick={this.handleOpen}>&gt;</button>\r\n                <span>{title || 'Edit Item Title'}</span>                \r\n                <button onClick={() => removeItem(id)}>&times;</button>                \r\n                    { open &&\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <sup>{input.length}</sup>\r\n                            <input type=\"text\" value={input} onChange={this.handleChange} />\r\n                            <input type=\"submit\" value=\"Edit\" />\r\n                            <fieldset>\r\n                                <legend>Conditions:</legend>\r\n                                {\r\n                                    conditions.map((condition, index) => {\r\n                                        let value = Object.keys(condition)[0];\r\n                                        return (\r\n                                            <div key={'cond'+index} className=\"conditions\">\r\n                                                <input type=\"checkbox\" id={'cond'+index} name=\"condition\" value={value} onChange={this.toggleCheckbox} checked={condition.checked}/>\r\n                                                <label htmlFor={'cond'+index}>{value.replace(/_/g, ' ')}</label>\r\n                                            </div>\r\n                                        )\r\n                                    }) \r\n                                }\r\n                            </fieldset>\r\n                        </form>\r\n                    }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\n\r\nconst Heading = (props) => {\r\n    const {showModal} = props;\r\n    const titleList = props.titleList.length ? props.titleList.map((title, index) => {\r\n        return (\r\n            <div key={title.title+index} className={title.valid ? 'green' : 'red'} id=\"menu-item\" >\r\n                {title.input || 'Edit Item Title'} <sub>{title.input.length}</sub>\r\n            </div>\r\n        )\r\n    }) : null\r\n    return (\r\n        <div className=\"heading\">\r\n            <div className=\"menu\">\r\n                {titleList}\r\n            </div>\r\n            {\r\n                props.titleList.reduce((acc, next) => next.valid ? acc +=1 : acc, 0) >= 4 &&\r\n                <button className=\"check\" onClick={() => showModal()}>Check Infos</button>                \r\n            }            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Heading;","import React from 'react';\r\n\r\nconst Modal = props => {\r\n    const {items, showModal} = props;\r\n    let recapItems = items.map(item => {\r\n        // recap object for our item conditions\r\n        let modalConditions = {\r\n            title: item.title,\r\n            true_cond: [],\r\n            false_cond: [],\r\n            unchecked: []\r\n        }\r\n        // set conditions of item in modalConditions arrays\r\n        item.conditions.forEach(condition => {\r\n            if (Object.values(condition)[0] && condition.checked) {\r\n                modalConditions.true_cond.push(Object.keys(condition)[0])\r\n            } else if (!Object.values(condition)[0] && condition.checked) {\r\n                modalConditions.false_cond.push(Object.keys(condition)[0])\r\n            } else {\r\n                modalConditions.unchecked.push(Object.keys(condition)[0])\r\n            }\r\n        })        \r\n        return {        \r\n          ...modalConditions\r\n        }\r\n      });\r\n    return (\r\n        <div id=\"modal\">\r\n            <div className=\"modal-content\">\r\n                <p>Total items: {items.length}</p>\r\n                <div className=\"modal-list\">\r\n                {\r\n                    recapItems.length ? recapItems.map(item => {\r\n                        return (\r\n                            <div key={item.title} className=\"modal-item\">\r\n                                <h3>{item.title || 'empty title'}</h3>\r\n                                <ul>\r\n                                    <li className=\"green\">True conditions:<br/>\r\n                                    {item.true_cond.join(', ').replace(/_/g, ' ') || 'none (nothing checked?)'}</li>                                   \r\n                                    <li className=\"red\">False conditions:<br/>\r\n                                    {item.false_cond.join(', ').replace(/_/g, ' ') || 'none (All good!)'}</li>                                   \r\n                                    <li className=\"blue\">Unchecked: (not verified)<br/>\r\n                                    {item.unchecked.join(', ').replace(/_/g, ' ') || 'none'}</li>                                   \r\n                                </ul>\r\n                            </div>\r\n                        )\r\n                    }) : null\r\n                }\r\n                </div>\r\n                <button className=\"close\" onClick={() => showModal()}>&times;</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal","import React, { Component } from 'react';\r\nimport Item from './Item';\r\nimport Heading from './Heading';\r\nimport Modal from './Modal';\r\n\r\nvar placeholder = document.createElement(\"li\");\r\nplaceholder.className = \"placeholder\";\r\n\r\nclass MenuComposer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: [                \r\n                {title: 'home', input: 'home', valid: true, open: false, id: 'one0', conditions:[{\"contains_number\": true, checked: false}, {\"2_chars_min\": true, checked: false}, {\"not_empty\": true, checked: false}]},\r\n                {title: 'about', input: 'about', valid: true, open: false, id: 'two1', conditions:[{\"contains_number\": true, checked: false}, {\"2_chars_min\": true, checked: false}, {\"not_empty\": true, checked: false}]},\r\n                {title: 'contact', input: 'contact', valid: true, open: false, id: 'three2', conditions:[{\"contains_number\": true, checked: false}, {\"2_chars_min\": true, checked: false}, {\"not_empty\": true, checked: false}]}\r\n            ],\r\n            history: [],\r\n            modal: false\r\n        }\r\n        this.removeItem = this.removeItem.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.updateItem = this.updateItem.bind(this);\r\n        this.handleOpenAll = this.handleOpenAll.bind(this);\r\n        this.cancelAction = this.cancelAction.bind(this);\r\n        this.showModal = this.showModal.bind(this);        \r\n    }\r\n\r\n    addItem() {\r\n        let id = Math.random();\r\n        let items = [...this.state.items, {title: '', input:'', valid: true, open: false, id: id, conditions:[{\"contains_number\": true, checked: false}, {\"2_chars_min\": true, checked: false}, {\"not_empty\": true, checked: false}]}];\r\n        this.setState({ items });\r\n    }\r\n\r\n    removeItem(id) {\r\n        const newItems = this.state.items.filter(item => {\r\n            return item.id !== id;\r\n        });\r\n        this.setState({ items: newItems })\r\n    }\r\n\r\n    updateItem(id, updatedProps) {\r\n        // save old state for every change except input\r\n        if (!updatedProps.hasOwnProperty('input')) {\r\n            this.setState({\r\n                history: [...this.state.history, this.state.items]\r\n            })\r\n        }\r\n        let updatedItem = this.state.items.find(item => item.id === id);        \r\n        updatedItem = {...updatedItem, ...updatedProps};        \r\n        // set valid to true if all conditions are true\r\n        updatedItem.valid = !updatedItem.conditions.map(condition => Object.values(condition)[0]).includes(false);\r\n\r\n        let newItems = this.state.items.map(item => {\r\n            if (item.id === id) {\r\n                return {\r\n                    ...updatedItem\r\n                }\r\n            } else {\r\n                return item;\r\n            }            \r\n        });        \r\n        this.setState({ items: newItems });        \r\n    }\r\n\r\n\r\n    handleOpenAll() {\r\n        // open or close all based number of items already open\r\n        let count = this.state.items.reduce((acc, next) => {\r\n            return next.open ? acc+=1 : acc;\r\n        }, 0)\r\n        // if less than half the items are open, open them all\r\n        let openAll = count < this.state.items.length / 2;\r\n        let newItems = this.state.items.map(item => {\r\n            return {\r\n                ...item,\r\n                open: openAll\r\n            }\r\n        })\r\n        this.setState({items: newItems});\r\n    }\r\n\r\n    cancelAction(){\r\n        if (this.state.history.length) {\r\n            let prevItems = this.state.history[this.state.history.length-1];\r\n            let newHistory = this.state.history;\r\n            newHistory.splice(newHistory.length-1, 1);\r\n            this.setState({ items: prevItems, history: newHistory });\r\n            } else {\r\n                return;\r\n            }\r\n    }\r\n\r\n    showModal() {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const itemList = this.state.items ? this.state.items.map((item, index) => {\r\n            return (\r\n                <Item \r\n                    key={item.title+index}\r\n                    item={item}\r\n                    removeItem={this.removeItem}\r\n                    updateItem={this.updateItem}\r\n                    draggable=\"true\"\r\n                    onDragStart={this.dragStart}\r\n                />\r\n            )\r\n        }) : null;\r\n        return (\r\n            <div className=\"composer\">\r\n                <Heading titleList={this.state.items.map(item => {\r\n                        return {title: item.title, input: item.input, valid:item.valid}\r\n                    })}\r\n                    showModal={this.showModal}\r\n                />\r\n                <div>\r\n                    <button onClick={this.handleOpenAll}>&gt;</button>\r\n                        <span className=\"composer-title\">Menu Composer</span>\r\n                    <button onClick={this.addItem}>+</button>\r\n                </div>\r\n                {itemList}\r\n                <button className=\"cancel\" onClick={this.cancelAction}>cancel</button>\r\n                {\r\n                    this.state.modal &&\r\n                    <Modal items={this.state.items} showModal={this.showModal}/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MenuComposer;","import React, { Component } from 'react';\nimport './App.css';\nimport MenuComposer from './components/MenuComposer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MenuComposer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}